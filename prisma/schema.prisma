generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  HR
  ADMIN
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String   @unique
  password  String
  role      Role     @default(STUDENT)
  createdAt DateTime @default(now())

  // ✅ ADDED: Back-relation for assessments created by an HR user
  createdAssessments Assessment[] @relation("CreatedByHR")

  // ✅ ADDED: Back-relation for assessments taken by a student
  takenAssessments Assessment[] @relation("TakenByCandidate")

  // ✅ ADDED: Back-relation for reports belonging to a user
  reports Report[]
}

model Assessment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  candidateId String   @db.ObjectId
  hrId        String   @db.ObjectId
  status      String   // "PENDING", "IN_PROGRESS", "COMPLETED"
  createdAt   DateTime @default(now())

  // ✅ ADDED: Explicit relations to the User model
  candidate User @relation("TakenByCandidate", fields: [candidateId], references: [id])
  hr        User @relation("CreatedByHR", fields: [hrId], references: [id])

  // One-to-one relations (these are correct)
  technicalAssessment TechnicalAssessment?
  behavioralInterview BehavioralInterview?
  report              Report?
}

model TechnicalAssessment {
  id                String     @id @default(auto()) @map("_id") @db.ObjectId
  assessmentId      String     @unique @db.ObjectId
  assessment        Assessment @relation(fields: [assessmentId], references: [id])
  status            String     // "NOT_STARTED", "COMPLETED"
  code              String?
  language          String?
  startedAt         DateTime   @default(now())
  completedAt       DateTime?
  evaluationResults Json?

  // ✅ IMPROVED: This relation makes it easier to fetch questions
  questions CodingQuestion[] @relation(fields: [questionIds], references: [id])
  questionIds       String[]         @db.ObjectId
}

model BehavioralInterview {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  assessmentId String     @unique @db.ObjectId
  assessment   Assessment @relation(fields: [assessmentId], references: [id])
  status       String
  startedAt    DateTime   @default(now())
  completedAt  DateTime?
  transcript   Json?
}

model Report {
  id              String     @id @default(auto()) @map("_id") @db.ObjectId
  assessmentId    String     @unique @db.ObjectId
  assessment      Assessment @relation(fields: [assessmentId], references: [id])
  candidateId     String     @db.ObjectId
  candidate       User       @relation(fields: [candidateId], references: [id])
  roleFitScore    Float?
  cultureFitScore Float?
  honestyScore    Float?
  technicalScore  Float?
  summary         String?
  createdAt       DateTime   @default(now())
}

model CodingQuestion {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  difficulty  String   // "Easy", "Medium", "Hard"
  testCases   Json
  createdAt   DateTime @default(now())

  // ✅ IMPROVED: This relation links questions back to the assessments they are part of
  technicalAssessments   TechnicalAssessment[] @relation(fields: [technicalAssessmentIds], references: [id])
  technicalAssessmentIds String[]              @db.ObjectId
}